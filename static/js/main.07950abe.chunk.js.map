{"version":3,"sources":["InputForm.js","Totals.js","RecentTransactions.js","ErrorModal.js","MainApp.js","registerServiceWorker.js","index.js"],"names":["FormContainer","styled","form","InputContainer","Input","FormControlContainer","FormControl","SubmitButton","Button","InputForm","handleChange","event","props","onChange","target","value","onSubmit","this","handleSubmit","margin","InputLabel","htmlFor","id","name","autoComplete","autoFocus","type","variant","color","Component","Container","div","CardContainer","Card","CardContentContainer","CardContent","cards","description","Grid","container","spacing","map","card","item","sm","md","lg","Paper","Typography","gutterBottom","component","displayAddress","align","transactions","transaction","xs","moment","time","_d","toString","result","balance","ModalContainer","Modal","aria-labelledby","aria-describedby","open","isOpen","onClose","handleClose","errorMessage","onClick","style","textTransform","border","Wrapper","MainApp","handleOpen","setState","preventDefault","loading","getBitcoinData","address","bitcoinAddress","refetchBitcoinData","setInterval","axios","get","state","then","res","total_received","data","addresses","total_sent","final_balance","txs","catch","err","handleError","response","window","location","reload","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","options","height","width","ErrorModal","Totals","totalReceived","totalSent","finalBalance","RecentTransactions","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.07950abe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nimport {\n  Input,\n  FormControl,\n  Button,\n  InputLabel,\n} from '@material-ui/core';\n\nconst FormContainer = styled.form`\n  display: flex;\n  align-items: flex-end;\n`;\n\nconst InputContainer = styled(Input)`\n  margin-right: 50px;\n`;\n\nconst FormControlContainer = styled(FormControl)`\n  width: 75%;\n`;\n\nconst SubmitButton = styled(Button)`\n  width: 25%;\n  height: 50%;\n`;\n\nexport default class InputForm extends Component {\n  handleChange = event => {\n    this.props.onChange(event.target.value)\n  }\n\n  render() {\n    return (\n      <FormContainer onSubmit={this.props.handleSubmit}>\n        <FormControlContainer margin=\"normal\">\n          <InputLabel htmlFor=\"address\">Enter Bitcoin address</InputLabel>\n          <InputContainer\n            value={this.props.value}\n            onChange={this.handleChange}\n            id=\"address\"\n            name=\"address\"\n            autoComplete=\"address\"\n            autoFocus\n          />\n        </FormControlContainer>\n        <SubmitButton\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Search Bitcoin\n        </SubmitButton>\n      </FormContainer>\n    );\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Grid, Card, CardContent, Typography, Paper } from '@material-ui/core';\n\nconst Container = styled.div`\n  margin-top: 20px;\n`;\n\nconst CardContainer = styled(Card)`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CardContentContainer = styled(CardContent)`\n  flex-grow: 1;\n`;\n\nconst cards = [\n  {\n    description: 'Total Received',\n    value: 'totalReceived'\n  },\n  {\n    description: 'Total Sent',\n    value: 'totalSent'\n  },\n  {\n    description: 'Final Balance',\n    value: 'finalBalance'\n  }\n];\n\nexport default props => (\n  <Container>\n    <Grid container spacing={40}>\n      {cards.map(card => (\n        <Grid item key={card} sm={6} md={4} lg={4}>\n          <Paper>\n            <CardContainer>\n              <CardContentContainer>\n                <Typography gutterBottom variant=\"headline\" component=\"h2\">\n                  {card.description}\n                </Typography>\n                <Typography>{props[card.value]}</Typography>\n              </CardContentContainer>\n            </CardContainer>\n          </Paper>\n        </Grid>\n      ))}\n    </Grid>\n  </Container>\n);\n","import React from 'react';\nimport styled from 'styled-components';\nimport moment from 'moment';\n\nimport { Paper, Grid, CardContent, Typography } from '@material-ui/core';\n\nconst CardContentContainer = styled(CardContent)`\n  flex-grow: 1;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 20px 0;\n`;\n\nexport default props => (\n  <Container>\n    {props.displayAddress && (\n      <Paper>\n        <Typography\n          variant=\"title\"\n          align=\"center\"\n          color=\"textSecondary\"\n          component=\"p\"\n        >\n          Recent Transactions\n        </Typography>\n        <Typography\n          variant=\"subheading\"\n          align=\"center\"\n          color=\"primary\"\n          component=\"p\"\n        >\n          {props.displayAddress &&\n            `Address: ${\n              props.displayAddress\n            } - Transactions will update every 3 minutes`}\n        </Typography>\n        <Grid container spacing={40}>\n          {props.transactions.map(transaction => (\n            <Grid item xs={12} sm={12} md={4} lg={4}>\n              <CardContentContainer>\n                <Typography gutterBottom variant=\"subheading\" component=\"h2\">\n                  {moment(transaction.time * 1000)._d.toString()}\n                </Typography>\n                <Typography gutterBottom variant=\"subheading\" component=\"h2\">\n                  Amount: {transaction.result / 100000000}\n                </Typography>\n                <Typography gutterBottom variant=\"subheading\" component=\"h2\">\n                  Balance: {transaction.balance / 100000000}\n                </Typography>\n              </CardContentContainer>\n            </Grid>\n          ))}\n        </Grid>\n      </Paper>\n    )}\n  </Container>\n);\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport {\n  Modal,\n  Typography,\n  Button\n} from '@material-ui/core';\n\nconst ModalContainer = styled.div`\n  position: absolute;\n  width: 300px\n  background-color: #ffffff;\n  border-radius: 4px;\n  padding: 20px;\n  top: 40%;\n  left: 35%;\n  text-align: center;\n`\n\nexport default (props => (\n  <Modal\n    aria-labelledby=\"simple-modal-title\"\n    aria-describedby=\"simple-modal-description\"\n    open={props.isOpen}\n    onClose={props.handleClose}\n  >\n    <ModalContainer>\n      <Typography variant=\"title\" id=\"modal-title\">\n        {props.errorMessage}\n      </Typography>\n      <Typography variant=\"subheading\" id=\"simple-modal-description\">\n        Please try again.\n      </Typography>\n      <Button onClick={props.handleClose} style={{textTransform: 'unset', border: '1px solid #727272'}}>Close\n      </Button>\n    </ModalContainer>\n  </Modal>\n))\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport Lottie from 'react-lottie';\nimport * as animationData from './loader.json';\nimport axios from 'axios';\nimport { Container, Row, Col } from 'react-grid-system';\n\nimport InputForm from './InputForm';\nimport Totals from './Totals';\nimport RecentTransactions from './RecentTransactions';\nimport ErrorModal from './ErrorModal';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport default class MainApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      bitcoinAddress: null,\n      total_received: null,\n      total_sent: null,\n      final_balance: null,\n      transactions: [],\n      errorMessage: 'null',\n      isOpen: false\n    };\n  }\n\n  handleOpen = () => {\n    this.setState({ isOpen: true });\n  };\n\n  handleClose = () => {\n    this.setState({ isOpen: false });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    this.getBitcoinData();\n  };\n\n  handleChange = address => {\n    this.setState({ bitcoinAddress: address });\n  };\n\n  handleError(err) {\n    if (err.response && err.response.data) {\n      this.setState({\n        loading: false,\n        isOpen: true,\n        errorMessage: err.response.data\n      });\n    } else {\n      /* If there's a network error, reload the app */\n      window.location.reload();\n    }\n  }\n\n  refetchBitcoinData = () => {\n    // Set refetch interval to 3 minutes to try to avoid rate-limiting\n    setInterval(this.getBitcoinData, 180000);\n  };\n\n  getBitcoinData = () => {\n    axios\n      .get(\n        `https://blockchain.info/multiaddr?cors=true&active=${\n          this.state.bitcoinAddress\n        }`\n      )\n      .then(res => {\n        this.setState(\n          {\n            loading: false,\n            total_received: res.data.addresses[0].total_received / 100000000,\n            total_sent: res.data.addresses[0].total_sent / 100000000,\n            final_balance: res.data.addresses[0].final_balance / 100000000,\n            transactions: res.data.txs,\n            displayAddress: this.state.bitcoinAddress\n          },\n          () => this.refetchBitcoinData()\n        );\n      })\n      .catch(err => {\n        this.handleError(err);\n      });\n  };\n\n  render() {\n    const defaultOptions = {\n      loop: true,\n      autoplay: true,\n      animationData: animationData,\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n\n    return (\n      <Wrapper>\n        {this.state.loading && (\n          <Lottie options={defaultOptions} height={400} width={400} />\n        )}\n\n        {this.state.errorMessage && (\n          <ErrorModal\n            isOpen={this.state.isOpen}\n            handleClose={this.handleClose}\n            errorMessage={this.state.errorMessage}\n          />\n        )}\n\n        {!this.state.loading && (\n          <Container>\n            <Row>\n              <Col md={12} lg={12}>\n                <InputForm\n                  onChange={this.handleChange}\n                  handleSubmit={this.handleSubmit}\n                  value={this.state.value}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col md={12} lg={12}>\n                <Totals\n                  totalReceived={this.state.total_received}\n                  totalSent={this.state.total_sent}\n                  finalBalance={this.state.final_balance}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col md={12} lg={12}>\n                <RecentTransactions\n                  transactions={this.state.transactions}\n                  displayAddress={this.state.displayAddress}\n                />\n              </Col>\n            </Row>\n          </Container>\n        )}\n      </Wrapper>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainApp from './MainApp';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}